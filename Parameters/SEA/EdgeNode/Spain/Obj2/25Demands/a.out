PARAMETER FILE: ../Parameters/SEA/EdgeNode/Spain/Obj2/25Demands/onlineParameters.txt
Getting input file paths...
Getting topology file...
... /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Link.csv
WARNING: Field 'initialMappingDemandFile=' is empty.
WARNING: Field 'initialMappingAssignmentFile=' is empty.
Getting GNPY parameters...
Getting formulation parameters...
Getting optimization parameters...
Getting execution parameters...
Getting subgradient parameters...
Populating online demand files...
Finish reading input.
TOPOLOGY FILE: /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Link.csv
ROUTED DEMANDS FILE: 
INITIAL ASSIGNMENT FILE: 
All information from input is consistent.
> Number of online demand files: 1
--- READING INSTANCE... --- 
--- CREATING INITIAL MAPPING... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Link.csv.
Creating edge #1. 1 -- 3. nb slices: 30, length: 280, cost: 1
Creating edge #2. 1 -- 5. nb slices: 30, length: 250, cost: 1
Creating edge #3. 1 -- 2. nb slices: 30, length: 460, cost: 1
Creating edge #4. 1 -- 4. nb slices: 30, length: 350, cost: 1
Creating edge #5. 2 -- 3. nb slices: 30, length: 280, cost: 1
Creating edge #6. 2 -- 5. nb slices: 30, length: 230, cost: 1
Creating edge #7. 3 -- 4. nb slices: 30, length: 320, cost: 1
Starting with an empty initial mapping. 
0 are present in the initial mapping.
--- READING NEW DEMANDS TO BE ROUTED... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Obj2/25Demands/Demand/Demand.csv ...
out

--- The Non Routed Demands ---
#1. 3 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#2. 2 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#3. 2 -- 3. nbSlices: 3, maxLength: 3000, ROUTED: NO
#4. 1 -- 2. nbSlices: 5, maxLength: 1500, ROUTED: NO
#5. 1 -- 2. nbSlices: 6, maxLength: 600, ROUTED: NO
#6. 3 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#7. 4 -- 5. nbSlices: 6, maxLength: 600, ROUTED: NO
#8. 3 -- 1. nbSlices: 6, maxLength: 600, ROUTED: NO
#9. 5 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#10. 2 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#11. 3 -- 1. nbSlices: 6, maxLength: 600, ROUTED: NO
#12. 2 -- 4. nbSlices: 6, maxLength: 600, ROUTED: NO
#13. 3 -- 2. nbSlices: 3, maxLength: 3000, ROUTED: NO
#14. 2 -- 3. nbSlices: 3, maxLength: 3000, ROUTED: NO
#15. 2 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#16. 2 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#17. 4 -- 5. nbSlices: 3, maxLength: 3000, ROUTED: NO
#18. 2 -- 3. nbSlices: 6, maxLength: 600, ROUTED: NO
#19. 5 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#20. 5 -- 2. nbSlices: 6, maxLength: 600, ROUTED: NO
#21. 5 -- 3. nbSlices: 4, maxLength: 1500, ROUTED: NO
#22. 4 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#23. 2 -- 1. nbSlices: 6, maxLength: 600, ROUTED: NO
#24. 4 -- 5. nbSlices: 3, maxLength: 3000, ROUTED: NO
#25. 5 -- 2. nbSlices: 6, maxLength: 600, ROUTED: NO

25 demands to be routed.
--- ROUTING DEMANDS --- 
#1 (3, 5), requiring 4 slices and having Max length 1500
#2 (2, 4), requiring 3 slices and having Max length 3000
#3 (2, 3), requiring 3 slices and having Max length 3000
#4 (1, 2), requiring 5 slices and having Max length 1500
#5 (1, 2), requiring 6 slices and having Max length 600
#6 (3, 5), requiring 4 slices and having Max length 1500
#7 (4, 5), requiring 6 slices and having Max length 600
#8 (3, 1), requiring 6 slices and having Max length 600
#9 (5, 4), requiring 3 slices and having Max length 3000
#10 (2, 5), requiring 5 slices and having Max length 1500
#11 (3, 1), requiring 6 slices and having Max length 600
#12 (2, 4), requiring 6 slices and having Max length 600
#13 (3, 2), requiring 3 slices and having Max length 3000
#14 (2, 3), requiring 3 slices and having Max length 3000
#15 (2, 5), requiring 4 slices and having Max length 1500
#16 (2, 5), requiring 4 slices and having Max length 1500
#17 (4, 5), requiring 3 slices and having Max length 3000
#18 (2, 3), requiring 6 slices and having Max length 600
#19 (5, 4), requiring 3 slices and having Max length 3000
#20 (5, 2), requiring 6 slices and having Max length 600
#21 (5, 3), requiring 4 slices and having Max length 1500
#22 (4, 5), requiring 5 slices and having Max length 1500
#23 (2, 1), requiring 6 slices and having Max length 600
#24 (4, 5), requiring 3 slices and having Max length 3000
#25 (5, 2), requiring 6 slices and having Max length 600
--> THE DIFFERENT ROUTING LOADS: 4, 3, 5, 6.
--- Edge-Node formulation has been chosen. |K| = 25, |S| = 30. ---
X variables were created.
Z variables were created.
T variables were created.
MaxSlicePerLink variables were created.
MaxSliceOverall variable was created.
Origin constraints have been defined...
Destination constraints have been defined...
Degree constraints have been defined...
Transmission reach constraints have been defined...
Channel selection constraints have been defined...
Forbidden slots constraints have been defined...
Edge-slots constraints have been defined...
Demand-edge-slots constraints have been defined...
Non-overlapping constraints have been defined...
Max Used Slice Per Link constraints have been defined...
Max Used Slice Overall constraints have been defined...
Objective obj_2 has been defined.
--- Edge-Node formulation has been defined ---
--- CPLEX has been initialized ---
CPLEX parameters have been defined...
CPLEX variables have been defined...
CPLEX constraints have been defined...
CPLEX objective has been defined...
LP model has been exported.
Solving...
Chosen objective: obj_2
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de
CPXPARAM_MIP_Display                             3
CPXPARAM_TimeLimit                               7200
Lazy constraint(s) or lazy constraint/branch callback is present.
    Disabling dual reductions (CPX_PARAM_REDUCE) in presolve.
    Disabling presolve reductions that prevent crushing forms.
Tried aggregator 3 times.
MIP Presolve eliminated 501 rows and 801 columns.
MIP Presolve modified 662 coefficients.
Aggregator did 25 substitutions.
Reduced MIP has 10584 rows, 16189 columns, and 62529 nonzeros.
Reduced MIP has 5814 binaries, 8 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.07 sec. (64.01 ticks)
Probing fixed 186 vars, tightened 5014 bounds.
Probing time = 0.41 sec. (104.36 ticks)
Cover probing fixed 0 vars, tightened 10 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 194 rows and 374 columns.
Aggregator did 3 substitutions.
Reduced MIP has 10387 rows, 15812 columns, and 61227 nonzeros.
Reduced MIP has 5625 binaries, 8 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.05 sec. (45.35 ticks)
Probing time = 0.03 sec. (7.79 ticks)
Clique table members: 43203.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.74 sec. (434.16 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0       36.0000   639                     36.0000       11         
      0     0       36.0000   639                    Cuts: 32     1970         
      0     0       36.0000   639                   Cuts: 129     3145         
      0     0       36.0000   639                    Cuts: 83     4603         
      0     0       36.0000   639                    Cuts: 34     5255         
      0     0       36.0000   639                   Cuts: 128     6257         
      0     2       36.0000   203                     36.0000     6257         
Elapsed time = 17.71 sec. (8169.85 ticks, tree = 0.02 MB, solutions = 0)
      1     3       36.0000   114                     36.0000    12262         
      2     4       36.0000    57                     36.0000    18511         
      4     4       36.1667    92                     36.0000    18067         
      6     8       36.2500    28                     36.0000    32870         
                                                      User: 4                  
*     7     6      integral     0       37.0000       36.0000    34532    2.70%
                                                      User: 2                  
Found incumbent of value 37.000000 after 29.85 sec. (14949.46 ticks)
      8     3       36.0000   120       37.0000       36.0000    13996    2.70%
     10     9       36.3333    69       37.0000       36.0000    37928    2.70%
                                                    Covers: 5                  
     11     6       36.1667    95       37.0000       36.0000    27099    2.70%
                                                   Covers: 17                  
     12     7        cutoff             37.0000       36.0000    53005    2.70%
     15     3        cutoff             37.0000       36.0000    84079    2.70%
                                                    Covers: 5                  
Elapsed time = 36.27 sec. (18763.17 ticks, tree = 0.02 MB, solutions = 1)
     17     6       36.5667   114       37.0000       36.0000    30307    2.70%
     20     1        cutoff             37.0000       36.0000   111378    2.70%
                                                      User: 4                  

GUB cover cuts applied:  3
Clique cuts applied:  13
Cover cuts applied:  40
Flow cuts applied:  2
Mixed integer rounding cuts applied:  17
Zero-half cuts applied:  45
Gomory fractional cuts applied:  1
User cuts applied:  50

Root node processing (before b&c):
  Real time             =   17.46 sec. (8062.86 ticks)
Parallel b&c, 8 threads:
  Real time             =   21.15 sec. (13890.00 ticks)
  Sync time (average)   =    9.50 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =   38.61 sec. (21952.86 ticks)
Objective Function Value: 37
Optimization done in 38.6115 secs.
Status: Optimal
Objective Function Value: 37
x(3,4,2) = 1
x(3,4,12) = 1
x(3,4,22) = 1
x(2,5,10) = 1
x(2,5,15) = 1
x(2,5,16) = 1
x(2,5,20) = 1
x(2,5,22) = 1
x(2,5,25) = 1
x(2,3,2) = 1
x(2,3,3) = 1
x(2,3,12) = 1
x(2,3,13) = 1
x(2,3,14) = 1
x(2,3,18) = 1
x(2,3,22) = 1
x(1,4,7) = 1
x(1,4,9) = 1
x(1,4,17) = 1
x(1,4,19) = 1
x(1,4,24) = 1
x(1,2,4) = 1
x(1,2,5) = 1
x(1,2,23) = 1
x(1,5,1) = 1
x(1,5,6) = 1
x(1,5,7) = 1
x(1,5,9) = 1
x(1,5,17) = 1
x(1,5,19) = 1
x(1,5,21) = 1
x(1,5,24) = 1
x(1,3,1) = 1
x(1,3,6) = 1
x(1,3,8) = 1
x(1,3,11) = 1
x(1,3,21) = 1
z(3,2) = 1
z(6,7) = 1
z(6,20) = 1
z(9,11) = 1
z(9,17) = 1
z(10,5) = 1
z(10,12) = 1
z(10,16) = 1
z(13,14) = 1
z(13,21) = 1
z(15,10) = 1
z(16,9) = 1
z(19,15) = 1
z(19,18) = 1
z(20,1) = 1
z(21,23) = 1
z(24,6) = 1
z(24,22) = 1
z(27,13) = 1
z(27,19) = 1
z(30,3) = 1
z(30,4) = 1
z(30,8) = 1
z(30,24) = 1
z(30,25) = 1
t(7,1,2) = 1
t(7,2,2) = 1
t(7,3,2) = 1
t(7,5,12) = 1
t(7,6,12) = 1
t(7,7,12) = 1
t(7,8,12) = 1
t(7,9,12) = 1
t(7,10,12) = 1
t(7,20,22) = 1
t(7,21,22) = 1
t(7,22,22) = 1
t(7,23,22) = 1
t(7,24,22) = 1
t(6,1,20) = 1
t(6,2,20) = 1
t(6,3,20) = 1
t(6,4,20) = 1
t(6,5,20) = 1
t(6,6,20) = 1
t(6,7,16) = 1
t(6,8,16) = 1
t(6,9,16) = 1
t(6,10,16) = 1
t(6,11,10) = 1
t(6,12,10) = 1
t(6,13,10) = 1
t(6,14,10) = 1
t(6,15,10) = 1
t(6,16,15) = 1
t(6,17,15) = 1
t(6,18,15) = 1
t(6,19,15) = 1
t(6,20,22) = 1
t(6,21,22) = 1
t(6,22,22) = 1
t(6,23,22) = 1
t(6,24,22) = 1
t(6,25,25) = 1
t(6,26,25) = 1
t(6,27,25) = 1
t(6,28,25) = 1
t(6,29,25) = 1
t(6,30,25) = 1
t(5,1,2) = 1
t(5,2,2) = 1
t(5,3,2) = 1
t(5,5,12) = 1
t(5,6,12) = 1
t(5,7,12) = 1
t(5,8,12) = 1
t(5,9,12) = 1
t(5,10,12) = 1
t(5,11,14) = 1
t(5,12,14) = 1
t(5,13,14) = 1
t(5,14,18) = 1
t(5,15,18) = 1
t(5,16,18) = 1
t(5,17,18) = 1
t(5,18,18) = 1
t(5,19,18) = 1
t(5,20,22) = 1
t(5,21,22) = 1
t(5,22,22) = 1
t(5,23,22) = 1
t(5,24,22) = 1
t(5,25,13) = 1
t(5,26,13) = 1
t(5,27,13) = 1
t(5,28,3) = 1
t(5,29,3) = 1
t(5,30,3) = 1
t(4,1,7) = 1
t(4,2,7) = 1
t(4,3,7) = 1
t(4,4,7) = 1
t(4,5,7) = 1
t(4,6,7) = 1
t(4,7,17) = 1
t(4,8,17) = 1
t(4,9,17) = 1
t(4,14,9) = 1
t(4,15,9) = 1
t(4,16,9) = 1
t(4,25,19) = 1
t(4,26,19) = 1
t(4,27,19) = 1
t(4,28,24) = 1
t(4,29,24) = 1
t(4,30,24) = 1
t(3,5,5) = 1
t(3,6,5) = 1
t(3,7,5) = 1
t(3,8,5) = 1
t(3,9,5) = 1
t(3,10,5) = 1
t(3,16,23) = 1
t(3,17,23) = 1
t(3,18,23) = 1
t(3,19,23) = 1
t(3,20,23) = 1
t(3,21,23) = 1
t(3,26,4) = 1
t(3,27,4) = 1
t(3,28,4) = 1
t(3,29,4) = 1
t(3,30,4) = 1
t(2,1,7) = 1
t(2,2,7) = 1
t(2,3,7) = 1
t(2,4,7) = 1
t(2,5,7) = 1
t(2,6,7) = 1
t(2,7,17) = 1
t(2,8,17) = 1
t(2,9,17) = 1
t(2,10,21) = 1
t(2,11,21) = 1
t(2,12,21) = 1
t(2,13,21) = 1
t(2,14,9) = 1
t(2,15,9) = 1
t(2,16,9) = 1
t(2,17,1) = 1
t(2,18,1) = 1
t(2,19,1) = 1
t(2,20,1) = 1
t(2,21,6) = 1
t(2,22,6) = 1
t(2,23,6) = 1
t(2,24,6) = 1
t(2,25,19) = 1
t(2,26,19) = 1
t(2,27,19) = 1
t(2,28,24) = 1
t(2,29,24) = 1
t(2,30,24) = 1
t(1,4,11) = 1
t(1,5,11) = 1
t(1,6,11) = 1
t(1,7,11) = 1
t(1,8,11) = 1
t(1,9,11) = 1
t(1,10,21) = 1
t(1,11,21) = 1
t(1,12,21) = 1
t(1,13,21) = 1
t(1,17,1) = 1
t(1,18,1) = 1
t(1,19,1) = 1
t(1,20,1) = 1
t(1,21,6) = 1
t(1,22,6) = 1
t(1,23,6) = 1
t(1,24,6) = 1
t(1,25,8) = 1
t(1,26,8) = 1
t(1,27,8) = 1
t(1,28,8) = 1
t(1,29,8) = 1
t(1,30,8) = 1
maxSlice(6) = 30
maxSlice(5) = 30
maxSlice(4) = 30
maxSlice(3) = 30
maxSlice(2) = 30
maxSlice(1) = 30
maxSlice(0) = 30
maxSlice = 30
Update RSA
Feasible

--- Slice occupation ---
#1.    **********   **************
#2. ******************************
#3.     ******     ******    *****
#4. *********    ***        ******
#5. *** **************************
#6. ******************************
#7. *** ******         *****      

For demand 1 : 
(3--1, 20)
(1--5, 20)

For demand 2 : 
(2--3, 3)
(3--4, 3)

For demand 3 : 
(2--3, 30)

For demand 4 : 
(1--2, 30)

For demand 5 : 
(1--2, 10)

For demand 6 : 
(3--1, 24)
(1--5, 24)

For demand 7 : 
(4--1, 6)
(1--5, 6)

For demand 8 : 
(3--1, 30)

For demand 9 : 
(5--1, 16)
(1--4, 16)

For demand 10 : 
(2--5, 15)

For demand 11 : 
(3--1, 9)

For demand 12 : 
(2--3, 10)
(3--4, 10)

For demand 13 : 
(3--2, 27)

For demand 14 : 
(2--3, 13)

For demand 15 : 
(2--5, 19)

For demand 16 : 
(2--5, 10)

For demand 17 : 
(4--1, 9)
(1--5, 9)

For demand 18 : 
(2--3, 19)

For demand 19 : 
(5--1, 27)
(1--4, 27)

For demand 20 : 
(5--2, 6)

For demand 21 : 
(5--1, 13)
(1--3, 13)

For demand 22 : 
(4--3, 24)
(2--5, 24)
(2--3, 24)
(3--2, 24)

For demand 23 : 
(2--1, 21)

For demand 24 : 
(4--1, 30)
(1--5, 30)

For demand 25 : 
(5--2, 30)

Output Demand_1
Output EdgeSliceHols: Demand_1
Time taken by iteration is : 38.852429 sec
Output Demand_FINAL
Output EdgeSliceHols: Demand_FINAL

--- The Demands ---
#1. 3 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#2. 2 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#3. 2 -- 3. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#4. 1 -- 2. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#5. 1 -- 2. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#6. 3 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#7. 4 -- 5. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#8. 3 -- 1. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#9. 5 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#10. 2 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#11. 3 -- 1. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#12. 2 -- 4. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#13. 3 -- 2. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#14. 2 -- 3. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#15. 2 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#16. 2 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#17. 4 -- 5. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#18. 2 -- 3. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#19. 5 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#20. 5 -- 2. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#21. 5 -- 3. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#22. 4 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#23. 2 -- 1. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#24. 4 -- 5. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#25. 5 -- 2. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES

Time taken by optimization is : 38.873666000 sec
Total time taken by program is : 38.885562200 sec
