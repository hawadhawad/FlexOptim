PARAMETER FILE: ../Parameters/SEA/EdgeNode/Spain/Obj4/25Demands/onlineParameters.txt
Getting input file paths...
Getting topology file...
... /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Link.csv
WARNING: Field 'initialMappingDemandFile=' is empty.
WARNING: Field 'initialMappingAssignmentFile=' is empty.
Getting GNPY parameters...
Getting formulation parameters...
Getting optimization parameters...
Getting execution parameters...
Getting subgradient parameters...
Populating online demand files...
Finish reading input.
TOPOLOGY FILE: /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Link.csv
ROUTED DEMANDS FILE: 
INITIAL ASSIGNMENT FILE: 
All information from input is consistent.
> Number of online demand files: 1
--- READING INSTANCE... --- 
--- CREATING INITIAL MAPPING... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Link.csv.
Creating edge #1. 1 -- 3. nb slices: 30, length: 280, cost: 1
Creating edge #2. 1 -- 5. nb slices: 30, length: 250, cost: 1
Creating edge #3. 1 -- 2. nb slices: 30, length: 460, cost: 1
Creating edge #4. 1 -- 4. nb slices: 30, length: 350, cost: 1
Creating edge #5. 2 -- 3. nb slices: 30, length: 280, cost: 1
Creating edge #6. 2 -- 5. nb slices: 30, length: 230, cost: 1
Creating edge #7. 3 -- 4. nb slices: 30, length: 320, cost: 1
Starting with an empty initial mapping. 
0 are present in the initial mapping.
--- READING NEW DEMANDS TO BE ROUTED... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/Spain/Obj4/25Demands/Demand/Demand.csv ...
out

--- The Non Routed Demands ---
#1. 3 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#2. 2 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#3. 2 -- 3. nbSlices: 3, maxLength: 3000, ROUTED: NO
#4. 1 -- 2. nbSlices: 5, maxLength: 1500, ROUTED: NO
#5. 1 -- 2. nbSlices: 6, maxLength: 600, ROUTED: NO
#6. 3 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#7. 4 -- 5. nbSlices: 6, maxLength: 600, ROUTED: NO
#8. 3 -- 1. nbSlices: 6, maxLength: 600, ROUTED: NO
#9. 5 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#10. 2 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#11. 3 -- 1. nbSlices: 6, maxLength: 600, ROUTED: NO
#12. 2 -- 4. nbSlices: 6, maxLength: 600, ROUTED: NO
#13. 3 -- 2. nbSlices: 3, maxLength: 3000, ROUTED: NO
#14. 2 -- 3. nbSlices: 3, maxLength: 3000, ROUTED: NO
#15. 2 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#16. 2 -- 5. nbSlices: 4, maxLength: 1500, ROUTED: NO
#17. 4 -- 5. nbSlices: 3, maxLength: 3000, ROUTED: NO
#18. 2 -- 3. nbSlices: 6, maxLength: 600, ROUTED: NO
#19. 5 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#20. 5 -- 2. nbSlices: 6, maxLength: 600, ROUTED: NO
#21. 5 -- 3. nbSlices: 4, maxLength: 1500, ROUTED: NO
#22. 4 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#23. 2 -- 1. nbSlices: 6, maxLength: 600, ROUTED: NO
#24. 4 -- 5. nbSlices: 3, maxLength: 3000, ROUTED: NO
#25. 5 -- 2. nbSlices: 6, maxLength: 600, ROUTED: NO

25 demands to be routed.
--- ROUTING DEMANDS --- 
#1 (3, 5), requiring 4 slices and having Max length 1500
#2 (2, 4), requiring 3 slices and having Max length 3000
#3 (2, 3), requiring 3 slices and having Max length 3000
#4 (1, 2), requiring 5 slices and having Max length 1500
#5 (1, 2), requiring 6 slices and having Max length 600
#6 (3, 5), requiring 4 slices and having Max length 1500
#7 (4, 5), requiring 6 slices and having Max length 600
#8 (3, 1), requiring 6 slices and having Max length 600
#9 (5, 4), requiring 3 slices and having Max length 3000
#10 (2, 5), requiring 5 slices and having Max length 1500
#11 (3, 1), requiring 6 slices and having Max length 600
#12 (2, 4), requiring 6 slices and having Max length 600
#13 (3, 2), requiring 3 slices and having Max length 3000
#14 (2, 3), requiring 3 slices and having Max length 3000
#15 (2, 5), requiring 4 slices and having Max length 1500
#16 (2, 5), requiring 4 slices and having Max length 1500
#17 (4, 5), requiring 3 slices and having Max length 3000
#18 (2, 3), requiring 6 slices and having Max length 600
#19 (5, 4), requiring 3 slices and having Max length 3000
#20 (5, 2), requiring 6 slices and having Max length 600
#21 (5, 3), requiring 4 slices and having Max length 1500
#22 (4, 5), requiring 5 slices and having Max length 1500
#23 (2, 1), requiring 6 slices and having Max length 600
#24 (4, 5), requiring 3 slices and having Max length 3000
#25 (5, 2), requiring 6 slices and having Max length 600
--> THE DIFFERENT ROUTING LOADS: 4, 3, 5, 6.
--- Edge-Node formulation has been chosen. |K| = 25, |S| = 30. ---
X variables were created.
Z variables were created.
T variables were created.
MaxSlicePerLink variables were created.
MaxSliceOverall variable was created.
Origin constraints have been defined...
Destination constraints have been defined...
Degree constraints have been defined...
Transmission reach constraints have been defined...
Channel selection constraints have been defined...
Forbidden slots constraints have been defined...
Edge-slots constraints have been defined...
Demand-edge-slots constraints have been defined...
Non-overlapping constraints have been defined...
Max Used Slice Per Link constraints have been defined...
Max Used Slice Overall constraints have been defined...
Objective obj_4 has been defined.
--- Edge-Node formulation has been defined ---
--- CPLEX has been initialized ---
CPLEX parameters have been defined...
CPLEX variables have been defined...
CPLEX constraints have been defined...
CPLEX objective has been defined...
LP model has been exported.
Solving...
Chosen objective: obj_4
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de
CPXPARAM_MIP_Display                             3
CPXPARAM_TimeLimit                               7200
Lazy constraint(s) or lazy constraint/branch callback is present.
    Disabling dual reductions (CPX_PARAM_REDUCE) in presolve.
    Disabling presolve reductions that prevent crushing forms.
Tried aggregator 3 times.
MIP Presolve eliminated 501 rows and 801 columns.
MIP Presolve modified 662 coefficients.
Aggregator did 25 substitutions.
Reduced MIP has 10584 rows, 16189 columns, and 62529 nonzeros.
Reduced MIP has 5814 binaries, 8 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.06 sec. (64.01 ticks)
Probing fixed 186 vars, tightened 5014 bounds.
Probing time = 0.45 sec. (104.36 ticks)
Cover probing fixed 0 vars, tightened 10 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 194 rows and 374 columns.
Aggregator did 3 substitutions.
Reduced MIP has 10387 rows, 15812 columns, and 61227 nonzeros.
Reduced MIP has 5625 binaries, 8 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.05 sec. (45.35 ticks)
Probing time = 0.03 sec. (7.79 ticks)
Clique table members: 43203.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.83 sec. (448.17 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0    10396.6667   631                  10396.6667       10         
      0     0    10550.0000   631                    Cuts: 52     2552         
      0     0    10558.3333   631                    Cuts: 23     4835         
      0     0    10566.6667   631                    Cuts: 59     6597         
      0     0    10575.0000   631                    Cuts: 42     8466         
      0     0    10575.0000   631                    Cuts: 84     9209         
      0     0    10575.0000   631                    Cuts: 32    10336         
      0     0    10575.0000   631                    Cuts: 71    11676         
      0     2    10575.0000    72                  10575.0000    11676         
Elapsed time = 22.56 sec. (8585.37 ticks, tree = 0.02 MB, solutions = 0)
      2     3    10575.0000   116                  10575.0000    13609         
      3     4    10576.6667   455                  10575.0000    15592         
                                                    Covers: 6                  
      8     6    10615.0000   380                  10575.0000    18286         
                                                      User: 8                  
     10     7    10945.5000   110                  10575.0000    23267         
                                                      Cuts: 6                  
     13     8    10626.0000    82                  10576.6667    28791         
                                                      User: 4                  
     14     7    10820.0000   475                  10576.6667    26923         
     17    10    11060.0000    52                  10576.6667    31889         
     18     7    10626.0000   384                  10576.6667    26363         
     20    12    10656.6667   103                  10580.0000    40183         
                                                     Cuts: 26                  
     22    13    11072.0000   623                  10580.0000    46187         
Elapsed time = 36.77 sec. (13355.60 ticks, tree = 0.02 MB, solutions = 0)
     27    19    10656.6667   137                  10615.0000    73419         
     30    22    11268.0000   437                  10615.0000   100626         
     35    27    10656.6667    21                  10615.0000   146516         
     39    29    11326.6667   445                  10615.0000   155760         
     42    33    11740.0000   266                  10615.0000   185086         
     47    36    11473.3333    96                  10615.0000   210539         
     49    36    11326.6667   522                  10615.0000   219728         
     55    42    11860.0000   632                  10615.0000   279332         
                                                      User: 2                  
     61    45    12040.0000   188                  10615.0000   303195         
     66    54    11170.0000    34                  10615.0000   353211         
                                                      User: 2                  
Elapsed time = 82.95 sec. (27536.74 ticks, tree = 0.20 MB, solutions = 0)
     70    47    11326.6667   380                  10615.0000   317290         
     76    59    11213.3333    88                  10615.0000   380622         
                                                      User: 4                  
     87    57    11213.3333    30                  10615.0000   382766         
    100    58    10656.6667    80                  10656.6667   388507         
    116    68    11800.0000   413                  10656.6667   414384         
                                                    Covers: 7                  
*   144    62      integral     0    10830.0000    10656.6667   442638    1.60%
Found incumbent of value 10830.000000 after 100.90 sec. (33430.03 ticks)
    150    72    infeasible          10830.0000    10656.6667   458125    1.60%
    181    74    11213.3333   240    10830.0000    10656.6667   464074    1.60%
    216    70    11815.0000   234    10830.0000    10656.6667   460446    1.60%
                                                    Covers: 2                  
    224     7    infeasible          10830.0000    10656.6667   575710    1.60%
                                                  Impl Bds: 7                  

GUB cover cuts applied:  3
Clique cuts applied:  7
Cover cuts applied:  23
Implied bound cuts applied:  31
Flow cuts applied:  1
Mixed integer rounding cuts applied:  3
Zero-half cuts applied:  47
User cuts applied:  62

Root node processing (before b&c):
  Real time             =   22.25 sec. (8433.20 ticks)
Parallel b&c, 8 threads:
  Real time             =   85.98 sec. (28921.95 ticks)
  Sync time (average)   =    6.94 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =  108.23 sec. (37355.15 ticks)
Objective Function Value: 10830
Optimization done in 108.236 secs.
Status: Optimal
Objective Function Value: 10830
x(3,4,2) = 1
x(3,4,12) = 1
x(3,4,22) = 1
x(2,5,10) = 1
x(2,5,15) = 1
x(2,5,16) = 1
x(2,5,20) = 1
x(2,5,22) = 1
x(2,5,25) = 1
x(2,3,2) = 1
x(2,3,3) = 1
x(2,3,12) = 1
x(2,3,13) = 1
x(2,3,14) = 1
x(2,3,18) = 1
x(2,3,22) = 1
x(1,4,7) = 1
x(1,4,9) = 1
x(1,4,17) = 1
x(1,4,19) = 1
x(1,4,24) = 1
x(1,2,4) = 1
x(1,2,5) = 1
x(1,2,23) = 1
x(1,5,1) = 1
x(1,5,6) = 1
x(1,5,7) = 1
x(1,5,9) = 1
x(1,5,17) = 1
x(1,5,19) = 1
x(1,5,21) = 1
x(1,5,24) = 1
x(1,3,1) = 1
x(1,3,6) = 1
x(1,3,8) = 1
x(1,3,11) = 1
x(1,3,21) = 1
z(3,24) = 1
z(4,15) = 1
z(6,8) = 1
z(6,19) = 1
z(7,12) = 1
z(10,5) = 1
z(10,6) = 1
z(10,13) = 1
z(10,20) = 1
z(13,9) = 1
z(15,22) = 1
z(16,17) = 1
z(18,2) = 1
z(19,11) = 1
z(20,10) = 1
z(21,3) = 1
z(22,7) = 1
z(23,23) = 1
z(24,16) = 1
z(26,21) = 1
z(27,18) = 1
z(30,1) = 1
z(30,4) = 1
z(30,14) = 1
z(30,25) = 1
t(7,2,12) = 1
t(7,3,12) = 1
t(7,4,12) = 1
t(7,5,12) = 1
t(7,6,12) = 1
t(7,7,12) = 1
t(7,11,22) = 1
t(7,12,22) = 1
t(7,13,22) = 1
t(7,14,22) = 1
t(7,15,22) = 1
t(7,16,2) = 1
t(7,17,2) = 1
t(7,18,2) = 1
t(6,1,15) = 1
t(6,2,15) = 1
t(6,3,15) = 1
t(6,4,15) = 1
t(6,5,20) = 1
t(6,6,20) = 1
t(6,7,20) = 1
t(6,8,20) = 1
t(6,9,20) = 1
t(6,10,20) = 1
t(6,11,22) = 1
t(6,12,22) = 1
t(6,13,22) = 1
t(6,14,22) = 1
t(6,15,22) = 1
t(6,16,10) = 1
t(6,17,10) = 1
t(6,18,10) = 1
t(6,19,10) = 1
t(6,20,10) = 1
t(6,21,16) = 1
t(6,22,16) = 1
t(6,23,16) = 1
t(6,24,16) = 1
t(6,25,25) = 1
t(6,26,25) = 1
t(6,27,25) = 1
t(6,28,25) = 1
t(6,29,25) = 1
t(6,30,25) = 1
t(5,2,12) = 1
t(5,3,12) = 1
t(5,4,12) = 1
t(5,5,12) = 1
t(5,6,12) = 1
t(5,7,12) = 1
t(5,8,13) = 1
t(5,9,13) = 1
t(5,10,13) = 1
t(5,11,22) = 1
t(5,12,22) = 1
t(5,13,22) = 1
t(5,14,22) = 1
t(5,15,22) = 1
t(5,16,2) = 1
t(5,17,2) = 1
t(5,18,2) = 1
t(5,19,3) = 1
t(5,20,3) = 1
t(5,21,3) = 1
t(5,22,18) = 1
t(5,23,18) = 1
t(5,24,18) = 1
t(5,25,18) = 1
t(5,26,18) = 1
t(5,27,18) = 1
t(5,28,14) = 1
t(5,29,14) = 1
t(5,30,14) = 1
t(4,1,24) = 1
t(4,2,24) = 1
t(4,3,24) = 1
t(4,4,19) = 1
t(4,5,19) = 1
t(4,6,19) = 1
t(4,11,9) = 1
t(4,12,9) = 1
t(4,13,9) = 1
t(4,14,17) = 1
t(4,15,17) = 1
t(4,16,17) = 1
t(4,17,7) = 1
t(4,18,7) = 1
t(4,19,7) = 1
t(4,20,7) = 1
t(4,21,7) = 1
t(4,22,7) = 1
t(3,5,5) = 1
t(3,6,5) = 1
t(3,7,5) = 1
t(3,8,5) = 1
t(3,9,5) = 1
t(3,10,5) = 1
t(3,18,23) = 1
t(3,19,23) = 1
t(3,20,23) = 1
t(3,21,23) = 1
t(3,22,23) = 1
t(3,23,23) = 1
t(3,26,4) = 1
t(3,27,4) = 1
t(3,28,4) = 1
t(3,29,4) = 1
t(3,30,4) = 1
t(2,1,24) = 1
t(2,2,24) = 1
t(2,3,24) = 1
t(2,4,19) = 1
t(2,5,19) = 1
t(2,6,19) = 1
t(2,7,6) = 1
t(2,8,6) = 1
t(2,9,6) = 1
t(2,10,6) = 1
t(2,11,9) = 1
t(2,12,9) = 1
t(2,13,9) = 1
t(2,14,17) = 1
t(2,15,17) = 1
t(2,16,17) = 1
t(2,17,7) = 1
t(2,18,7) = 1
t(2,19,7) = 1
t(2,20,7) = 1
t(2,21,7) = 1
t(2,22,7) = 1
t(2,23,21) = 1
t(2,24,21) = 1
t(2,25,21) = 1
t(2,26,21) = 1
t(2,27,1) = 1
t(2,28,1) = 1
t(2,29,1) = 1
t(2,30,1) = 1
t(1,1,8) = 1
t(1,2,8) = 1
t(1,3,8) = 1
t(1,4,8) = 1
t(1,5,8) = 1
t(1,6,8) = 1
t(1,7,6) = 1
t(1,8,6) = 1
t(1,9,6) = 1
t(1,10,6) = 1
t(1,14,11) = 1
t(1,15,11) = 1
t(1,16,11) = 1
t(1,17,11) = 1
t(1,18,11) = 1
t(1,19,11) = 1
t(1,23,21) = 1
t(1,24,21) = 1
t(1,25,21) = 1
t(1,26,21) = 1
t(1,27,1) = 1
t(1,28,1) = 1
t(1,29,1) = 1
t(1,30,1) = 1
maxSlice(6) = 30
maxSlice(5) = 30
maxSlice(4) = 30
maxSlice(3) = 30
maxSlice(2) = 30
maxSlice(1) = 29
maxSlice(0) = 30
maxSlice = 30
Update RSA
Feasible

--- Slice occupation ---
#1. **********   ******   ********
#2. ******************************
#3.     ******       ******  *****
#4. ******    ************        
#5.  *****************************
#6. ******************************
#7.  ******   ********            

For demand 1 : 
(3--1, 30)
(1--5, 30)

For demand 2 : 
(2--3, 18)
(3--4, 18)

For demand 3 : 
(2--3, 21)

For demand 4 : 
(1--2, 30)

For demand 5 : 
(1--2, 10)

For demand 6 : 
(3--1, 10)
(1--5, 10)

For demand 7 : 
(4--1, 22)
(1--5, 22)

For demand 8 : 
(3--1, 6)

For demand 9 : 
(5--1, 13)
(1--4, 13)

For demand 10 : 
(2--5, 20)

For demand 11 : 
(3--1, 19)

For demand 12 : 
(2--3, 7)
(3--4, 7)

For demand 13 : 
(3--2, 10)

For demand 14 : 
(2--3, 30)

For demand 15 : 
(2--5, 4)

For demand 16 : 
(2--5, 24)

For demand 17 : 
(4--1, 16)
(1--5, 16)

For demand 18 : 
(2--3, 27)

For demand 19 : 
(5--1, 6)
(1--4, 6)

For demand 20 : 
(5--2, 10)

For demand 21 : 
(5--1, 26)
(1--3, 26)

For demand 22 : 
(4--3, 15)
(2--5, 15)
(2--3, 15)
(3--2, 15)

For demand 23 : 
(2--1, 23)

For demand 24 : 
(4--1, 3)
(1--5, 3)

For demand 25 : 
(5--2, 30)

Output Demand_1
Output EdgeSliceHols: Demand_1
Time taken by iteration is : 108.477296 sec
Output Demand_FINAL
Output EdgeSliceHols: Demand_FINAL

--- The Demands ---
#1. 3 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#2. 2 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#3. 2 -- 3. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#4. 1 -- 2. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#5. 1 -- 2. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#6. 3 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#7. 4 -- 5. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#8. 3 -- 1. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#9. 5 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#10. 2 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#11. 3 -- 1. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#12. 2 -- 4. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#13. 3 -- 2. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#14. 2 -- 3. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#15. 2 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#16. 2 -- 5. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#17. 4 -- 5. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#18. 2 -- 3. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#19. 5 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#20. 5 -- 2. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#21. 5 -- 3. nbSlices: 4, maxLength: 1500.000000000, ROUTED: YES
#22. 4 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#23. 2 -- 1. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#24. 4 -- 5. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#25. 5 -- 2. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES

Time taken by optimization is : 108.486863800 sec
Total time taken by program is : 108.498459500 sec
