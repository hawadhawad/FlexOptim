PARAMETER FILE: ../Parameters/SEA/EdgeNode/NSF/Obj2/30Demands/onlineParameters.txt
Getting input file paths...
Getting topology file...
... /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/NSF/Link.csv
WARNING: Field 'initialMappingDemandFile=' is empty.
WARNING: Field 'initialMappingAssignmentFile=' is empty.
Getting GNPY parameters...
Getting formulation parameters...
Getting optimization parameters...
Getting execution parameters...
Getting subgradient parameters...
Populating online demand files...
Finish reading input.
TOPOLOGY FILE: /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/NSF/Link.csv
ROUTED DEMANDS FILE: 
INITIAL ASSIGNMENT FILE: 
All information from input is consistent.
> Number of online demand files: 1
--- READING INSTANCE... --- 
--- CREATING INITIAL MAPPING... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/NSF/Link.csv.
Creating edge #1. 1 -- 2. nb slices: 120, length: 447, cost: 1
Creating edge #2. 1 -- 3. nb slices: 120, length: 304, cost: 1
Creating edge #3. 2 -- 4. nb slices: 120, length: 568, cost: 1
Creating edge #4. 2 -- 3. nb slices: 120, length: 434, cost: 1
Creating edge #5. 3 -- 5. nb slices: 120, length: 443, cost: 1
Creating edge #6. 4 -- 5. nb slices: 120, length: 273, cost: 1
Creating edge #7. 4 -- 6. nb slices: 120, length: 462, cost: 1
Creating edge #8. 5 -- 7. nb slices: 120, length: 230, cost: 1
Creating edge #9. 6 -- 8. nb slices: 120, length: 233, cost: 1
Creating edge #10. 6 -- 7. nb slices: 120, length: 348, cost: 1
Creating edge #11. 7 -- 9. nb slices: 120, length: 467, cost: 1
Creating edge #12. 7 -- 8. nb slices: 120, length: 302, cost: 1
Creating edge #13. 8 -- 9. nb slices: 120, length: 93, cost: 1
Starting with an empty initial mapping. 
0 are present in the initial mapping.
--- READING NEW DEMANDS TO BE ROUTED... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/EdgeNode/NSF/Obj2/30Demands/Demand/30Demands.csv ...
out

--- The Non Routed Demands ---
#1. 8 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#2. 5 -- 2. nbSlices: 5, maxLength: 1500, ROUTED: NO
#3. 9 -- 6. nbSlices: 5, maxLength: 1500, ROUTED: NO
#4. 7 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#5. 8 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#6. 6 -- 8. nbSlices: 5, maxLength: 1500, ROUTED: NO
#7. 1 -- 7. nbSlices: 3, maxLength: 3000, ROUTED: NO
#8. 8 -- 1. nbSlices: 5, maxLength: 1500, ROUTED: NO
#9. 8 -- 1. nbSlices: 5, maxLength: 1500, ROUTED: NO
#10. 5 -- 6. nbSlices: 6, maxLength: 600, ROUTED: NO
#11. 3 -- 1. nbSlices: 5, maxLength: 1500, ROUTED: NO
#12. 6 -- 3. nbSlices: 5, maxLength: 1500, ROUTED: NO
#13. 5 -- 6. nbSlices: 3, maxLength: 3000, ROUTED: NO
#14. 1 -- 6. nbSlices: 5, maxLength: 1500, ROUTED: NO
#15. 6 -- 2. nbSlices: 5, maxLength: 1500, ROUTED: NO
#16. 9 -- 5. nbSlices: 5, maxLength: 1500, ROUTED: NO
#17. 8 -- 2. nbSlices: 3, maxLength: 3000, ROUTED: NO
#18. 8 -- 1. nbSlices: 5, maxLength: 1500, ROUTED: NO
#19. 2 -- 3. nbSlices: 5, maxLength: 1500, ROUTED: NO
#20. 1 -- 8. nbSlices: 5, maxLength: 1500, ROUTED: NO
#21. 1 -- 8. nbSlices: 5, maxLength: 1500, ROUTED: NO
#22. 2 -- 3. nbSlices: 5, maxLength: 1500, ROUTED: NO
#23. 8 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#24. 6 -- 2. nbSlices: 3, maxLength: 3000, ROUTED: NO
#25. 5 -- 6. nbSlices: 3, maxLength: 3000, ROUTED: NO
#26. 5 -- 1. nbSlices: 5, maxLength: 1500, ROUTED: NO
#27. 5 -- 1. nbSlices: 5, maxLength: 1500, ROUTED: NO
#28. 2 -- 6. nbSlices: 5, maxLength: 1500, ROUTED: NO
#29. 2 -- 6. nbSlices: 5, maxLength: 1500, ROUTED: NO
#30. 7 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO

30 demands to be routed.
--- ROUTING DEMANDS --- 
#1 (8, 5), requiring 5 slices and having Max length 1500
#2 (5, 2), requiring 5 slices and having Max length 1500
#3 (9, 6), requiring 5 slices and having Max length 1500
#4 (7, 5), requiring 5 slices and having Max length 1500
#5 (8, 5), requiring 5 slices and having Max length 1500
#6 (6, 8), requiring 5 slices and having Max length 1500
#7 (1, 7), requiring 3 slices and having Max length 3000
#8 (8, 1), requiring 5 slices and having Max length 1500
#9 (8, 1), requiring 5 slices and having Max length 1500
#10 (5, 6), requiring 6 slices and having Max length 600
#11 (3, 1), requiring 5 slices and having Max length 1500
#12 (6, 3), requiring 5 slices and having Max length 1500
#13 (5, 6), requiring 3 slices and having Max length 3000
#14 (1, 6), requiring 5 slices and having Max length 1500
#15 (6, 2), requiring 5 slices and having Max length 1500
#16 (9, 5), requiring 5 slices and having Max length 1500
#17 (8, 2), requiring 3 slices and having Max length 3000
#18 (8, 1), requiring 5 slices and having Max length 1500
#19 (2, 3), requiring 5 slices and having Max length 1500
#20 (1, 8), requiring 5 slices and having Max length 1500
#21 (1, 8), requiring 5 slices and having Max length 1500
#22 (2, 3), requiring 5 slices and having Max length 1500
#23 (8, 4), requiring 3 slices and having Max length 3000
#24 (6, 2), requiring 3 slices and having Max length 3000
#25 (5, 6), requiring 3 slices and having Max length 3000
#26 (5, 1), requiring 5 slices and having Max length 1500
#27 (5, 1), requiring 5 slices and having Max length 1500
#28 (2, 6), requiring 5 slices and having Max length 1500
#29 (2, 6), requiring 5 slices and having Max length 1500
#30 (7, 4), requiring 3 slices and having Max length 3000
--> THE DIFFERENT ROUTING LOADS: 5, 3, 6.
--- Edge-Node formulation has been chosen. |K| = 30, |S| = 120. ---
X variables were created.
Z variables were created.
T variables were created.
MaxSlicePerLink variables were created.
MaxSliceOverall variable was created.
Origin constraints have been defined...
Destination constraints have been defined...
Degree constraints have been defined...
Transmission reach constraints have been defined...
Channel selection constraints have been defined...
Forbidden slots constraints have been defined...
Edge-slots constraints have been defined...
Demand-edge-slots constraints have been defined...
Non-overlapping constraints have been defined...
Max Used Slice Per Link constraints have been defined...
Max Used Slice Overall constraints have been defined...
Objective obj_2 has been defined.
--- Edge-Node formulation has been defined ---
--- CPLEX has been initialized ---
CPLEX parameters have been defined...
CPLEX variables have been defined...
CPLEX constraints have been defined...
CPLEX objective has been defined...
LP model has been exported.
Solving...
Chosen objective: obj_2
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de
CPXPARAM_MIP_Display                             3
CPXPARAM_TimeLimit                               7200
Lazy constraint(s) or lazy constraint/branch callback is present.
    Disabling dual reductions (CPX_PARAM_REDUCE) in presolve.
    Disabling presolve reductions that prevent crushing forms.
Tried aggregator 2 times.
MIP Presolve eliminated 468 rows and 545 columns.
MIP Presolve modified 3493 coefficients.
Aggregator did 12 substitutions.
Reduced MIP has 95460 rows, 145677 columns, and 590490 nonzeros.
Reduced MIP has 50671 binaries, 14 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.39 sec. (474.23 ticks)
Probing fixed 968 vars, tightened 46805 bounds.
Probing time = 10.72 sec. (2214.14 ticks)
Cover probing fixed 0 vars, tightened 21 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 981 rows and 1941 columns.
Aggregator did 2 substitutions.
Reduced MIP has 94477 rows, 143734 columns, and 583717 nonzeros.
Reduced MIP has 49701 binaries, 14 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.53 sec. (612.11 ticks)
Probing fixed 0 vars, tightened 1 bounds.
Probing time = 0.15 sec. (44.19 ticks)
Cover probing fixed 0 vars, tightened 12 bounds.
Clique table members: 392762.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 15.55 sec. (5693.19 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0       55.0000  4484                     55.0000     7287         
      0     0       64.0000  4484                  Cuts: 3385    23513         
      0     0       69.0000  4484                  Cuts: 1520    45277         
      0     0       69.0000  4484                  Cuts: 1529    60162         
      0     0       69.0000  4484                  Cuts: 1068    95678         
      0     0       69.0000  4484                  Cuts: 1032   108518         
      0     0       69.0000  4484                   Cuts: 891   132926         
      0     0       69.0000  4484                  Cuts: 1245   143112         
      0     0       69.0000  4484                   Cuts: 806   153511         
      0     0       69.0000  4484                  Cuts: 1541   159314         
      0     0       69.0000  4484                  Cuts: 1999   169787         
      0     0       69.0000  4484                  Cuts: 1682   181432         
      0     0       69.0000  4484                  Cuts: 1590   191766         
Heuristic still looking.
      0     2       69.0000  6554                     69.0000   191766         
Elapsed time = 1556.84 sec. (829926.07 ticks, tree = 0.02 MB, solutions = 0)
      1     1    infeasible                           69.0000   192001         
      2     3       69.0000  7184                     69.0000   249252         
      3     3       69.0000  7531                     69.0000   282660         
                                                      User: 2                  
      4     4       69.0000  7088                     69.0000   291609         
                                                      User: 2                  
      5     5       69.0000  6839                     69.0000   294806         
                                                      User: 2                  
      6     3       69.0000  8353                     69.0000   291534         
      7     5       69.5000  5588                     69.0000   307198         
      8     6    infeasible                           69.0000   352595         
                                                      User: 6                  
      9     6    infeasible                           69.0000   363788         
     10     6       69.0000  6784                     69.0000   296351         
Elapsed time = 2484.58 sec. (1281294.13 ticks, tree = 0.02 MB, solutions = 0)
     11     6       69.0000  7396                     69.0000   349731         
                                                Impl Bds: 185                  
     12     7       69.0000  8643                     69.0000   398317         
     13     4       69.0000  8183                     69.0000   321259         
     14     7       69.0000  8284                     69.0000   396872         
                                                Impl Bds: 138                  
     15     7       69.0000  7828                     69.0000   408446         
                                                Impl Bds: 121                  
     16     8       69.0000  7051                     69.0000   471078         
     17    12       69.0000  7264                     69.0000   627783         
     18     7       69.0000  7569                     69.0000   405519         
                                                      User: 2                  
     19    10       69.0000  7818                     69.0000   541870         
                                                 Impl Bds: 76                  
     20    13       69.0000  6070                     69.0000   679913         
                                                      User: 2                  
Elapsed time = 3345.28 sec. (1471558.93 ticks, tree = 0.07 MB, solutions = 0)
     21    15       69.0000  7174                     69.0000   721106         
                                                      User: 2                  
     22    16       69.0000  7135                     69.0000   721828         
     23    16       69.0000  7670                     69.0000   741959         
     27    18       69.0000  7039                     69.0000   722913         
     28    18       69.0000  5682                     69.0000   749983         
     29    19       69.0000  5923                     69.0000   725718         
     31    20       69.0000  5783                     69.0000   726597         
     33    19       69.0000  5558                     69.0000   752235         
     34    21       69.0000  5556                     69.0000   728257         
     35    19       69.0000  6974                     69.0000   748273         
Elapsed time = 3568.95 sec. (1518687.60 ticks, tree = 2.00 MB, solutions = 0)
     37    20       69.0000  6948                     69.0000   749563         
     38    21       69.0000  4829                     69.0000   756715         
     39    21       69.0000  6833                     69.0000   751269         
     40    22       69.0000  6793                     69.0000   751688         
     41    23       69.0000  6791                     69.0000   752258         
     42     8       69.0000  7179                     69.0000   472937         
     43    14       69.0000  7327                     69.0000   689474         
                                                 Impl Bds: 85                  
     44    15       69.0000  6928                     69.0000   691804         
     45    16       69.0000  6872                     69.0000   692747         
     46    17       69.0000  6830                     69.0000   693164         
Elapsed time = 3668.44 sec. (1547057.29 ticks, tree = 1.79 MB, solutions = 0)
     47    18       69.0000  6750                     69.0000   693736         
     48    19       69.0000  6672                     69.0000   694378         
     49    20       69.0000  6483                     69.0000   695933         
     50     9       69.0000  8435                     69.0000   536443         
     51     9       69.0000  9063                     69.0000   536435         
                                                      User: 6                  
     53    23       69.0000  4200                     69.0000   771040         
     54    24       69.0000  4199                     69.0000   771291         
     55    25       69.0000  4195                     69.0000   772256         
     56    26       69.0000  4162                     69.0000   773006         
     57    31       69.0000  4015                     69.0000   959532         
                                                      User: 2                  
Elapsed time = 3818.68 sec. (1578064.18 ticks, tree = 7.54 MB, solutions = 0)
     58    32       69.0000  3951                     69.0000   961186         
     59    22       69.0000  5413                     69.0000   729675         
     61    39       69.0000  5260                     69.0000   970544         
                                                      User: 2                  
     63    34       69.0000  3780                     69.0000   961957         
     65    40       69.0000  4893                     69.0000   974724         
     66    36       69.0000  3769                     69.0000   962814         
     68    41       69.0000  4577                     69.0000   977362         
     69    20       69.0000  6670                     69.0000   790821         
     71    37       72.7000  3644                     69.0000   966545         
     76    22       69.0000  6487                     69.0000   791031         
Elapsed time = 3968.98 sec. (1608337.60 ticks, tree = 3.50 MB, solutions = 0)
     77    41       69.0000  3212                     69.0000   973344         
     79    44       69.0000  6222                     69.0000   993324         
     82    43       69.0000  2891                     69.0000   977841         
     86    46       69.0000  2652                     69.0000   981596         
     89    46       69.0000  5947                     69.0000   996885         
     90    47       69.0000  1553                     69.0000   988116         
     91    48       69.0000  1223                     69.0000   992273         
     94    51       69.0000  1094                     69.0000   995269         
     95    52       69.0000   999                     69.0000   998855         
     99    56       69.0000   661                     69.0000  1000950         
Elapsed time = 4046.11 sec. (1622502.32 ticks, tree = 13.92 MB, solutions = 1)
    107    64       69.0000    50                     69.0000  1002505         
*   109    27      integral     0       69.0000       69.0000  1002878    0.00%
Found incumbent of value 69.000000 after 4046.11 sec. (1623788.27 ticks)
    110    20       69.0000  6655       69.0000       69.0000   836867    0.00%
                                                     User: 10                  
    111    24       69.0000  6771       69.0000       69.0000   752374    0.00%
    112    46       70.3333  2155       69.0000       69.0000  1008018    0.00%
                                                      User: 2                  
    114    21       69.0000  6131       69.0000       69.0000   840269    0.00%
    115    48       70.6667  2050       69.0000       69.0000  1010388    0.00%
    119    50       71.0000  2020       69.0000       69.0000  1011603    0.00%
    124    55       71.0000  1963       69.0000       69.0000  1013386    0.00%
    125    21       69.0000  6058       69.0000       69.0000   697954    0.00%
    127    56       71.0000  2172       69.0000       69.0000  1013611    0.00%
                                                      User: 2                  
Elapsed time = 4108.90 sec. (1643190.20 ticks, tree = 10.07 MB, solutions = 1)
    129    22       69.0000  5589       69.0000       69.0000   843378    0.00%
    130    58       71.0000  1818       69.0000       69.0000  1016912    0.00%
    132    60       71.0000  1583       69.0000       69.0000  1017908    0.00%
    134    62       71.0000   897       69.0000       69.0000  1019731    0.00%
    135    63       71.0000   740       69.0000       69.0000  1021154    0.00%
    141    69       72.7271   761       69.0000       69.0000  1025401    0.00%
    143    71       71.0000   628       69.0000       69.0000  1026978    0.00%
    147    75       71.0000   290       69.0000       69.0000  1028632    0.00%
    151    79       71.0000   132       69.0000       69.0000  1030487    0.00%
    156    21       69.0000  7085       69.0000       69.0000   891480    0.00%
                                                     Cuts: 26                  
Elapsed time = 4137.54 sec. (1657511.53 ticks, tree = 1.08 MB, solutions = 2)
    157    21       69.0000  8115       69.0000       69.0000   946383    0.00%
    158    22       69.0000  6494       69.0000       69.0000   895443    0.00%
    159    23       69.0000  6269       69.0000       69.0000   896420    0.00%
    160    22       69.0000  7872       69.0000       69.0000   950332    0.00%
    162    24       69.0000  7881       69.0000       69.0000   950918    0.00%
    163    25       69.0000  7667       69.0000       69.0000   952672    0.00%
    164    47       69.0000  5769       69.0000       69.0000   998447    0.00%

Clique cuts applied:  2
Cover cuts applied:  22
Implied bound cuts applied:  4657
Mixed integer rounding cuts applied:  96
Zero-half cuts applied:  99
Lift and project cuts applied:  1
Gomory fractional cuts applied:  2
User cuts applied:  212

Root node processing (before b&c):
  Real time             = 1546.03 sec. (820044.99 ticks)
Parallel b&c, 8 threads:
  Real time             = 2621.25 sec. (861905.64 ticks)
  Sync time (average)   =  849.71 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) = 4167.28 sec. (1681950.63 ticks)
Objective Function Value: 69
Optimization done in 4167.36 secs.
Status: Optimal
Objective Function Value: 69
x(7,8,1) = 1
x(7,8,5) = 1
x(7,8,8) = 1
x(7,8,9) = 1
x(7,8,18) = 1
x(7,8,20) = 1
x(7,8,21) = 1
x(7,9,3) = 1
x(7,9,16) = 1
x(6,7,3) = 1
x(6,7,10) = 1
x(6,7,13) = 1
x(6,7,25) = 1
x(6,8,6) = 1
x(6,8,17) = 1
x(6,8,23) = 1
x(5,7,1) = 1
x(5,7,4) = 1
x(5,7,5) = 1
x(5,7,7) = 1
x(5,7,8) = 1
x(5,7,9) = 1
x(5,7,10) = 1
x(5,7,13) = 1
x(5,7,16) = 1
x(5,7,18) = 1
x(5,7,20) = 1
x(5,7,21) = 1
x(5,7,25) = 1
x(5,7,30) = 1
x(4,6,12) = 1
x(4,6,14) = 1
x(4,6,15) = 1
x(4,6,17) = 1
x(4,6,23) = 1
x(4,6,24) = 1
x(4,6,28) = 1
x(4,6,29) = 1
x(4,5,30) = 1
x(3,5,2) = 1
x(3,5,7) = 1
x(3,5,8) = 1
x(3,5,9) = 1
x(3,5,18) = 1
x(3,5,20) = 1
x(3,5,21) = 1
x(3,5,26) = 1
x(3,5,27) = 1
x(2,3,2) = 1
x(2,3,12) = 1
x(2,3,19) = 1
x(2,3,22) = 1
x(2,4,12) = 1
x(2,4,14) = 1
x(2,4,15) = 1
x(2,4,17) = 1
x(2,4,24) = 1
x(2,4,28) = 1
x(2,4,29) = 1
x(1,3,7) = 1
x(1,3,8) = 1
x(1,3,9) = 1
x(1,3,11) = 1
x(1,3,18) = 1
x(1,3,20) = 1
x(1,3,21) = 1
x(1,3,26) = 1
x(1,3,27) = 1
x(1,2,14) = 1
z(5,6) = 1
z(5,8) = 1
z(8,29) = 1
z(11,17) = 1
z(12,20) = 1
z(17,26) = 1
z(18,19) = 1
z(20,10) = 1
z(20,14) = 1
z(23,30) = 1
z(24,22) = 1
z(25,27) = 1
z(29,12) = 1
z(31,21) = 1
z(36,15) = 1
z(36,18) = 1
z(39,3) = 1
z(43,24) = 1
z(46,7) = 1
z(49,23) = 1
z(51,2) = 1
z(55,28) = 1
z(61,1) = 1
z(66,5) = 1
z(69,13) = 1
z(71,11) = 1
z(76,16) = 1
z(86,9) = 1
z(90,25) = 1
z(118,4) = 1
t(12,1,8) = 1
t(12,2,8) = 1
t(12,3,8) = 1
t(12,4,8) = 1
t(12,5,8) = 1
t(12,8,20) = 1
t(12,9,20) = 1
t(12,10,20) = 1
t(12,11,20) = 1
t(12,12,20) = 1
t(12,27,21) = 1
t(12,28,21) = 1
t(12,29,21) = 1
t(12,30,21) = 1
t(12,31,21) = 1
t(12,32,18) = 1
t(12,33,18) = 1
t(12,34,18) = 1
t(12,35,18) = 1
t(12,36,18) = 1
t(12,57,1) = 1
t(12,58,1) = 1
t(12,59,1) = 1
t(12,60,1) = 1
t(12,61,1) = 1
t(12,62,5) = 1
t(12,63,5) = 1
t(12,64,5) = 1
t(12,65,5) = 1
t(12,66,5) = 1
t(12,82,9) = 1
t(12,83,9) = 1
t(12,84,9) = 1
t(12,85,9) = 1
t(12,86,9) = 1
t(11,35,3) = 1
t(11,36,3) = 1
t(11,37,3) = 1
t(11,38,3) = 1
t(11,39,3) = 1
t(11,72,16) = 1
t(11,73,16) = 1
t(11,74,16) = 1
t(11,75,16) = 1
t(11,76,16) = 1
t(10,15,10) = 1
t(10,16,10) = 1
t(10,17,10) = 1
t(10,18,10) = 1
t(10,19,10) = 1
t(10,20,10) = 1
t(10,35,3) = 1
t(10,36,3) = 1
t(10,37,3) = 1
t(10,38,3) = 1
t(10,39,3) = 1
t(10,67,13) = 1
t(10,68,13) = 1
t(10,69,13) = 1
t(10,88,25) = 1
t(10,89,25) = 1
t(10,90,25) = 1
t(9,1,6) = 1
t(9,2,6) = 1
t(9,3,6) = 1
t(9,4,6) = 1
t(9,5,6) = 1
t(9,9,17) = 1
t(9,10,17) = 1
t(9,11,17) = 1
t(9,47,23) = 1
t(9,48,23) = 1
t(9,49,23) = 1
t(8,1,8) = 1
t(8,2,8) = 1
t(8,3,8) = 1
t(8,4,8) = 1
t(8,5,8) = 1
t(8,8,20) = 1
t(8,9,20) = 1
t(8,10,20) = 1
t(8,11,20) = 1
t(8,12,20) = 1
t(8,15,10) = 1
t(8,16,10) = 1
t(8,17,10) = 1
t(8,18,10) = 1
t(8,19,10) = 1
t(8,20,10) = 1
t(8,21,30) = 1
t(8,22,30) = 1
t(8,23,30) = 1
t(8,27,21) = 1
t(8,28,21) = 1
t(8,29,21) = 1
t(8,30,21) = 1
t(8,31,21) = 1
t(8,32,18) = 1
t(8,33,18) = 1
t(8,34,18) = 1
t(8,35,18) = 1
t(8,36,18) = 1
t(8,44,7) = 1
t(8,45,7) = 1
t(8,46,7) = 1
t(8,57,1) = 1
t(8,58,1) = 1
t(8,59,1) = 1
t(8,60,1) = 1
t(8,61,1) = 1
t(8,62,5) = 1
t(8,63,5) = 1
t(8,64,5) = 1
t(8,65,5) = 1
t(8,66,5) = 1
t(8,67,13) = 1
t(8,68,13) = 1
t(8,69,13) = 1
t(8,72,16) = 1
t(8,73,16) = 1
t(8,74,16) = 1
t(8,75,16) = 1
t(8,76,16) = 1
t(8,82,9) = 1
t(8,83,9) = 1
t(8,84,9) = 1
t(8,85,9) = 1
t(8,86,9) = 1
t(8,88,25) = 1
t(8,89,25) = 1
t(8,90,25) = 1
t(8,114,4) = 1
t(8,115,4) = 1
t(8,116,4) = 1
t(8,117,4) = 1
t(8,118,4) = 1
t(7,4,29) = 1
t(7,5,29) = 1
t(7,6,29) = 1
t(7,7,29) = 1
t(7,8,29) = 1
t(7,9,17) = 1
t(7,10,17) = 1
t(7,11,17) = 1
t(7,16,14) = 1
t(7,17,14) = 1
t(7,18,14) = 1
t(7,19,14) = 1
t(7,20,14) = 1
t(7,25,12) = 1
t(7,26,12) = 1
t(7,27,12) = 1
t(7,28,12) = 1
t(7,29,12) = 1
t(7,32,15) = 1
t(7,33,15) = 1
t(7,34,15) = 1
t(7,35,15) = 1
t(7,36,15) = 1
t(7,41,24) = 1
t(7,42,24) = 1
t(7,43,24) = 1
t(7,47,23) = 1
t(7,48,23) = 1
t(7,49,23) = 1
t(7,51,28) = 1
t(7,52,28) = 1
t(7,53,28) = 1
t(7,54,28) = 1
t(7,55,28) = 1
t(6,21,30) = 1
t(6,22,30) = 1
t(6,23,30) = 1
t(5,1,8) = 1
t(5,2,8) = 1
t(5,3,8) = 1
t(5,4,8) = 1
t(5,5,8) = 1
t(5,8,20) = 1
t(5,9,20) = 1
t(5,10,20) = 1
t(5,11,20) = 1
t(5,12,20) = 1
t(5,13,26) = 1
t(5,14,26) = 1
t(5,15,26) = 1
t(5,16,26) = 1
t(5,17,26) = 1
t(5,21,27) = 1
t(5,22,27) = 1
t(5,23,27) = 1
t(5,24,27) = 1
t(5,25,27) = 1
t(5,27,21) = 1
t(5,28,21) = 1
t(5,29,21) = 1
t(5,30,21) = 1
t(5,31,21) = 1
t(5,32,18) = 1
t(5,33,18) = 1
t(5,34,18) = 1
t(5,35,18) = 1
t(5,36,18) = 1
t(5,44,7) = 1
t(5,45,7) = 1
t(5,46,7) = 1
t(5,47,2) = 1
t(5,48,2) = 1
t(5,49,2) = 1
t(5,50,2) = 1
t(5,51,2) = 1
t(5,82,9) = 1
t(5,83,9) = 1
t(5,84,9) = 1
t(5,85,9) = 1
t(5,86,9) = 1
t(4,14,19) = 1
t(4,15,19) = 1
t(4,16,19) = 1
t(4,17,19) = 1
t(4,18,19) = 1
t(4,20,22) = 1
t(4,21,22) = 1
t(4,22,22) = 1
t(4,23,22) = 1
t(4,24,22) = 1
t(4,25,12) = 1
t(4,26,12) = 1
t(4,27,12) = 1
t(4,28,12) = 1
t(4,29,12) = 1
t(4,47,2) = 1
t(4,48,2) = 1
t(4,49,2) = 1
t(4,50,2) = 1
t(4,51,2) = 1
t(3,4,29) = 1
t(3,5,29) = 1
t(3,6,29) = 1
t(3,7,29) = 1
t(3,8,29) = 1
t(3,9,17) = 1
t(3,10,17) = 1
t(3,11,17) = 1
t(3,16,14) = 1
t(3,17,14) = 1
t(3,18,14) = 1
t(3,19,14) = 1
t(3,20,14) = 1
t(3,25,12) = 1
t(3,26,12) = 1
t(3,27,12) = 1
t(3,28,12) = 1
t(3,29,12) = 1
t(3,32,15) = 1
t(3,33,15) = 1
t(3,34,15) = 1
t(3,35,15) = 1
t(3,36,15) = 1
t(3,41,24) = 1
t(3,42,24) = 1
t(3,43,24) = 1
t(3,51,28) = 1
t(3,52,28) = 1
t(3,53,28) = 1
t(3,54,28) = 1
t(3,55,28) = 1
t(2,1,8) = 1
t(2,2,8) = 1
t(2,3,8) = 1
t(2,4,8) = 1
t(2,5,8) = 1
t(2,8,20) = 1
t(2,9,20) = 1
t(2,10,20) = 1
t(2,11,20) = 1
t(2,12,20) = 1
t(2,13,26) = 1
t(2,14,26) = 1
t(2,15,26) = 1
t(2,16,26) = 1
t(2,17,26) = 1
t(2,21,27) = 1
t(2,22,27) = 1
t(2,23,27) = 1
t(2,24,27) = 1
t(2,25,27) = 1
t(2,27,21) = 1
t(2,28,21) = 1
t(2,29,21) = 1
t(2,30,21) = 1
t(2,31,21) = 1
t(2,32,18) = 1
t(2,33,18) = 1
t(2,34,18) = 1
t(2,35,18) = 1
t(2,36,18) = 1
t(2,44,7) = 1
t(2,45,7) = 1
t(2,46,7) = 1
t(2,67,11) = 1
t(2,68,11) = 1
t(2,69,11) = 1
t(2,70,11) = 1
t(2,71,11) = 1
t(2,82,9) = 1
t(2,83,9) = 1
t(2,84,9) = 1
t(2,85,9) = 1
t(2,86,9) = 1
t(1,16,14) = 1
t(1,17,14) = 1
t(1,18,14) = 1
t(1,19,14) = 1
t(1,20,14) = 1
maxSlice(11) = 85
maxSlice(10) = 75
maxSlice(9) = 89
maxSlice(8) = 48
maxSlice(7) = 117
maxSlice(6) = 54
maxSlice(5) = 23
maxSlice(4) = 85
maxSlice(3) = 50
maxSlice(2) = 54
maxSlice(1) = 85
maxSlice(0) = 19
maxSlice = 117
Update RSA
Feasible

--- Slice occupation ---
#1.                *****                                                                                                    
#2. *****  **********   ***** **********       ***                    *****          *****                                  
#3.    ********    *****    *****  *****    ***       *****                                                                 
#4.              ***** **********                 *****                                                                     
#5. *****  **********   ***** **********       ********                              *****                                  
#6.                     ***                                                                                                 
#7.    ********    *****    *****  *****    ***   *** *****                                                                 
#8. *****  *****  *********   **********       ***          *************  *****     ***** ***                       *****  
#9. *****   ***                                   ***                                                                       
#10.               ******              *****                           ***                  ***                              
#11.                                   *****                                *****                                            
#12. *****  *****              **********                    **********               *****                                  
#13.                                                                                                                         

For demand 1 : 
(8--7, 61)
(7--5, 61)

For demand 2 : 
(5--3, 51)
(3--2, 51)

For demand 3 : 
(9--7, 39)
(7--6, 39)

For demand 4 : 
(7--5, 118)

For demand 5 : 
(8--7, 66)
(7--5, 66)

For demand 6 : 
(6--8, 5)

For demand 7 : 
(5--7, 46)
(5--3, 46)
(3--5, 46)
(1--3, 46)

For demand 8 : 
(8--7, 5)
(7--5, 5)
(5--7, 5)
(5--3, 5)
(3--5, 5)
(3--1, 5)

For demand 9 : 
(8--7, 86)
(7--5, 86)
(5--7, 86)
(5--3, 86)
(3--5, 86)
(3--1, 86)

For demand 10 : 
(7--6, 20)
(5--7, 20)

For demand 11 : 
(3--1, 71)

For demand 12 : 
(6--4, 29)
(4--2, 29)
(2--3, 29)
(2--4, 29)

For demand 13 : 
(7--6, 69)
(5--7, 69)

For demand 14 : 
(4--6, 20)
(4--2, 20)
(1--2, 20)
(2--4, 20)

For demand 15 : 
(6--4, 36)
(4--2, 36)

For demand 16 : 
(9--7, 76)
(7--5, 76)

For demand 17 : 
(8--6, 11)
(6--4, 11)
(4--6, 11)
(4--2, 11)

For demand 18 : 
(8--7, 36)
(7--5, 36)
(5--7, 36)
(5--3, 36)
(3--5, 36)
(3--1, 36)

For demand 19 : 
(2--3, 18)

For demand 20 : 
(7--8, 12)
(7--5, 12)
(5--7, 12)
(5--3, 12)
(3--5, 12)
(1--3, 12)

For demand 21 : 
(7--8, 31)
(7--5, 31)
(5--7, 31)
(5--3, 31)
(3--5, 31)
(1--3, 31)

For demand 22 : 
(2--3, 24)

For demand 23 : 
(8--6, 49)
(6--4, 49)

For demand 24 : 
(6--4, 43)
(4--2, 43)

For demand 25 : 
(7--6, 90)
(5--7, 90)

For demand 26 : 
(5--3, 17)
(3--1, 17)

For demand 27 : 
(5--3, 25)
(3--1, 25)

For demand 28 : 
(4--6, 55)
(2--4, 55)

For demand 29 : 
(4--6, 8)
(2--4, 8)

For demand 30 : 
(7--5, 23)
(5--4, 23)

Output 30Demands_1
Output EdgeSliceHols: 30Demands_1
Time taken by iteration is : 4169.974405 sec
Output 30Demands_FINAL
Output EdgeSliceHols: 30Demands_FINAL

--- The Demands ---
#1. 8 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#2. 5 -- 2. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#3. 9 -- 6. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#4. 7 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#5. 8 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#6. 6 -- 8. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#7. 1 -- 7. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#8. 8 -- 1. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#9. 8 -- 1. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#10. 5 -- 6. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#11. 3 -- 1. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#12. 6 -- 3. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#13. 5 -- 6. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#14. 1 -- 6. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#15. 6 -- 2. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#16. 9 -- 5. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#17. 8 -- 2. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#18. 8 -- 1. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#19. 2 -- 3. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#20. 1 -- 8. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#21. 1 -- 8. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#22. 2 -- 3. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#23. 8 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#24. 6 -- 2. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#25. 5 -- 6. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#26. 5 -- 1. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#27. 5 -- 1. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#28. 2 -- 6. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#29. 2 -- 6. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#30. 7 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES

Time taken by optimization is : 4169.998004300 sec
Total time taken by program is : 4170.018508900 sec
