PARAMETER FILE: ../Parameters/SEA/FlowForm/German/Obj8/40Demands/onlineParameters.txt
Getting input file paths...
Getting topology file...
... /mnt/c/FlexOptim/RSA/Parameters/SEA/FlowForm/German/Link.csv
WARNING: Field 'initialMappingDemandFile=' is empty.
WARNING: Field 'initialMappingAssignmentFile=' is empty.
Getting GNPY parameters...
Getting formulation parameters...
Getting optimization parameters...
Getting execution parameters...
Getting subgradient parameters...
Populating online demand files...
Finish reading input.
TOPOLOGY FILE: /mnt/c/FlexOptim/RSA/Parameters/SEA/FlowForm/German/Link.csv
ROUTED DEMANDS FILE: 
INITIAL ASSIGNMENT FILE: 
All information from input is consistent.
> Number of online demand files: 1
--- READING INSTANCE... --- 
--- CREATING INITIAL MAPPING... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/FlowForm/German/Link.csv.
Creating edge #1. 1 -- 14. nb slices: 140, length: 122.16, cost: 1
Creating edge #2. 2 -- 14. nb slices: 140, length: 111.329, cost: 1
Creating edge #3. 3 -- 14. nb slices: 140, length: 96.7743, cost: 1
Creating edge #4. 3 -- 4. nb slices: 140, length: 255.611, cost: 1
Creating edge #5. 2 -- 3. nb slices: 140, length: 138.725, cost: 1
Creating edge #6. 2 -- 4. nb slices: 140, length: 241.005, cost: 1
Creating edge #7. 4 -- 7. nb slices: 140, length: 146.951, cost: 1
Creating edge #8. 2 -- 7. nb slices: 140, length: 204.09, cost: 1
Creating edge #9. 7 -- 15. nb slices: 140, length: 296.554, cost: 1
Creating edge #10. 6 -- 7. nb slices: 140, length: 232.003, cost: 1
Creating edge #11. 6 -- 15. nb slices: 140, length: 181.42, cost: 1
Creating edge #12. 13 -- 15. nb slices: 140, length: 68.2969, cost: 1
Creating edge #13. 10 -- 15. nb slices: 140, length: 154.625, cost: 1
Creating edge #14. 10 -- 16. nb slices: 140, length: 69.6874, cost: 1
Creating edge #15. 9 -- 10. nb slices: 140, length: 36.655, cost: 1
Creating edge #16. 8 -- 9. nb slices: 140, length: 27.3268, cost: 1
Creating edge #17. 8 -- 16. nb slices: 140, length: 25.9849, cost: 1
Creating edge #18. 1 -- 16. nb slices: 140, length: 234.435, cost: 1
Creating edge #19. 2 -- 16. nb slices: 140, length: 193.939, cost: 1
Creating edge #20. 13 -- 17. nb slices: 140, length: 50.5769, cost: 1
Creating edge #21. 12 -- 17. nb slices: 140, length: 65.7133, cost: 1
Creating edge #22. 11 -- 12. nb slices: 140, length: 74.2544, cost: 1
Creating edge #23. 6 -- 12. nb slices: 140, length: 154.468, cost: 1
Creating edge #24. 5 -- 11. nb slices: 140, length: 121.233, cost: 1
Creating edge #25. 5 -- 6. nb slices: 140, length: 151.216, cost: 1
Starting with an empty initial mapping. 
0 are present in the initial mapping.
--- READING NEW DEMANDS TO BE ROUTED... --- 
Reading /mnt/c/FlexOptim/RSA/Parameters/SEA/FlowForm/German/Obj8/40Demands/Demand/40Demand.csv ...
out

--- The Non Routed Demands ---
#1. 7 -- 17. nbSlices: 3, maxLength: 3000, ROUTED: NO
#2. 12 -- 16. nbSlices: 3, maxLength: 3000, ROUTED: NO
#3. 8 -- 12. nbSlices: 3, maxLength: 3000, ROUTED: NO
#4. 3 -- 10. nbSlices: 3, maxLength: 3000, ROUTED: NO
#5. 7 -- 16. nbSlices: 5, maxLength: 1500, ROUTED: NO
#6. 7 -- 12. nbSlices: 3, maxLength: 3000, ROUTED: NO
#7. 5 -- 7. nbSlices: 5, maxLength: 1500, ROUTED: NO
#8. 4 -- 6. nbSlices: 3, maxLength: 3000, ROUTED: NO
#9. 10 -- 14. nbSlices: 3, maxLength: 3000, ROUTED: NO
#10. 7 -- 13. nbSlices: 3, maxLength: 3000, ROUTED: NO
#11. 3 -- 8. nbSlices: 3, maxLength: 3000, ROUTED: NO
#12. 4 -- 14. nbSlices: 3, maxLength: 3000, ROUTED: NO
#13. 16 -- 17. nbSlices: 3, maxLength: 3000, ROUTED: NO
#14. 10 -- 12. nbSlices: 6, maxLength: 600, ROUTED: NO
#15. 6 -- 10. nbSlices: 3, maxLength: 3000, ROUTED: NO
#16. 3 -- 15. nbSlices: 6, maxLength: 600, ROUTED: NO
#17. 3 -- 16. nbSlices: 3, maxLength: 3000, ROUTED: NO
#18. 5 -- 15. nbSlices: 6, maxLength: 600, ROUTED: NO
#19. 7 -- 14. nbSlices: 3, maxLength: 3000, ROUTED: NO
#20. 5 -- 13. nbSlices: 3, maxLength: 3000, ROUTED: NO
#21. 14 -- 16. nbSlices: 3, maxLength: 3000, ROUTED: NO
#22. 7 -- 15. nbSlices: 6, maxLength: 600, ROUTED: NO
#23. 7 -- 15. nbSlices: 6, maxLength: 600, ROUTED: NO
#24. 7 -- 15. nbSlices: 6, maxLength: 600, ROUTED: NO
#25. 13 -- 16. nbSlices: 3, maxLength: 3000, ROUTED: NO
#26. 8 -- 13. nbSlices: 3, maxLength: 3000, ROUTED: NO
#27. 10 -- 17. nbSlices: 3, maxLength: 3000, ROUTED: NO
#28. 2 -- 10. nbSlices: 5, maxLength: 1500, ROUTED: NO
#29. 5 -- 17. nbSlices: 3, maxLength: 3000, ROUTED: NO
#30. 11 -- 15. nbSlices: 3, maxLength: 3000, ROUTED: NO
#31. 3 -- 4. nbSlices: 3, maxLength: 3000, ROUTED: NO
#32. 6 -- 13. nbSlices: 3, maxLength: 3000, ROUTED: NO
#33. 2 -- 4. nbSlices: 5, maxLength: 1500, ROUTED: NO
#34. 6 -- 7. nbSlices: 6, maxLength: 600, ROUTED: NO
#35. 15 -- 16. nbSlices: 6, maxLength: 600, ROUTED: NO
#36. 10 -- 13. nbSlices: 3, maxLength: 3000, ROUTED: NO
#37. 2 -- 8. nbSlices: 3, maxLength: 3000, ROUTED: NO
#38. 6 -- 17. nbSlices: 3, maxLength: 3000, ROUTED: NO
#39. 8 -- 15. nbSlices: 5, maxLength: 1500, ROUTED: NO
#40. 2 -- 7. nbSlices: 5, maxLength: 1500, ROUTED: NO

40 demands to be routed.
--- ROUTING DEMANDS --- 
#1 (7, 17), requiring 3 slices and having Max length 3000
#2 (12, 16), requiring 3 slices and having Max length 3000
#3 (8, 12), requiring 3 slices and having Max length 3000
#4 (3, 10), requiring 3 slices and having Max length 3000
#5 (7, 16), requiring 5 slices and having Max length 1500
#6 (7, 12), requiring 3 slices and having Max length 3000
#7 (5, 7), requiring 5 slices and having Max length 1500
#8 (4, 6), requiring 3 slices and having Max length 3000
#9 (10, 14), requiring 3 slices and having Max length 3000
#10 (7, 13), requiring 3 slices and having Max length 3000
#11 (3, 8), requiring 3 slices and having Max length 3000
#12 (4, 14), requiring 3 slices and having Max length 3000
#13 (16, 17), requiring 3 slices and having Max length 3000
#14 (10, 12), requiring 6 slices and having Max length 600
#15 (6, 10), requiring 3 slices and having Max length 3000
#16 (3, 15), requiring 6 slices and having Max length 600
#17 (3, 16), requiring 3 slices and having Max length 3000
#18 (5, 15), requiring 6 slices and having Max length 600
#19 (7, 14), requiring 3 slices and having Max length 3000
#20 (5, 13), requiring 3 slices and having Max length 3000
#21 (14, 16), requiring 3 slices and having Max length 3000
#22 (7, 15), requiring 6 slices and having Max length 600
#23 (7, 15), requiring 6 slices and having Max length 600
#24 (7, 15), requiring 6 slices and having Max length 600
#25 (13, 16), requiring 3 slices and having Max length 3000
#26 (8, 13), requiring 3 slices and having Max length 3000
#27 (10, 17), requiring 3 slices and having Max length 3000
#28 (2, 10), requiring 5 slices and having Max length 1500
#29 (5, 17), requiring 3 slices and having Max length 3000
#30 (11, 15), requiring 3 slices and having Max length 3000
#31 (3, 4), requiring 3 slices and having Max length 3000
#32 (6, 13), requiring 3 slices and having Max length 3000
#33 (2, 4), requiring 5 slices and having Max length 1500
#34 (6, 7), requiring 6 slices and having Max length 600
#35 (15, 16), requiring 6 slices and having Max length 600
#36 (10, 13), requiring 3 slices and having Max length 3000
#37 (2, 8), requiring 3 slices and having Max length 3000
#38 (6, 17), requiring 3 slices and having Max length 3000
#39 (8, 15), requiring 5 slices and having Max length 1500
#40 (2, 7), requiring 5 slices and having Max length 1500
--> THE DIFFERENT ROUTING LOADS: 3, 5, 6.
--- Flow formulation has been chosen. |K| = 40, |S| = 140. ---
Flow variables have been defined...
Max slice variables have been defined...
Max slice overall variable has been defined...
Source constraints have been defined...
Flow conservation constraints have been defined...
Target constraints have been defined...
Length constraints have been defined...
Non-Overlapping constraints has been defined...
Max Used Slice Per Link constraints have been defined...
Max Used Slice Overall constraints have been defined...
Max Used Slice Overall2 constraints have been defined...
Max Used Slice Overall3 constraints have been defined...
Flow Node cuts have been defined...
Flow Edge cuts have been defined...
Objective obj_8 has been defined.
--- Flow formulation has been defined ---
--- CPLEX has been initialized ---
CPLEX parameters have been defined...
CPLEX variables have been defined...
CPLEX constraints have been defined...
CPLEX objective has been defined...
LP model has been exported.
Solving...
Chosen objective: obj_8
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de
CPXPARAM_MIP_Display                             3
CPXPARAM_TimeLimit                               7200
Presolve has eliminated 2422 rows and 29811 columns...
Presolve has improved bounds 2 times...
Aggregator has done 14135 substitutions...
Tried aggregator 4 times.
MIP Presolve eliminated 2524 rows and 32298 columns.
MIP Presolve modified 109485 coefficients.
Aggregator did 14670 substitutions.
Reduced MIP has 83546 rows, 209375 columns, and 3589092 nonzeros.
Reduced MIP has 209374 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 21.32 sec. (26083.63 ticks)
Probing fixed 147 vars, tightened 0 bounds.
Probing time = 2.16 sec. (1011.68 ticks)
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 210 columns.
MIP Presolve modified 97 coefficients.
Reduced MIP has 83546 rows, 209165 columns, and 3584771 nonzeros.
Reduced MIP has 209164 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 2.52 sec. (2174.58 ticks)
Probing time = 0.28 sec. (90.44 ticks)
Clique table members: 46320.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 145.55 sec. (69454.67 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                          140.0000        5.0000            96.43%
Found incumbent of value 140.000000 after 181.27 sec. (110044.15 ticks)
      0     0       17.2486  3403      140.0000       17.2486       25   87.68%

GUB cover cuts applied:  59
Clique cuts applied:  11
Flow cuts applied:  167
Mixed integer rounding cuts applied:  453
Zero-half cuts applied:  97

Root node processing (before b&c):
  Real time             = 7200.45 sec. (6494869.37 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) = 7200.45 sec. (6494869.37 ticks)
Objective Function Value: 140
Optimization done in 7200.51 secs.
Status: Feasible
Objective Function Value: 140
x(1,12,17,35) = 1
x(1,6,12,35) = 1
x(1,7,6,35) = 1
x(2,5,6,3) = 1
x(2,11,5,3) = 1
x(2,12,11,3) = 1
x(2,6,7,3) = 1
x(2,7,2,3) = 1
x(2,2,16,3) = 1
x(3,5,11,33) = 1
x(3,11,12,33) = 1
x(3,8,9,33) = 1
x(3,9,10,33) = 1
x(3,10,15,33) = 1
x(3,6,5,33) = 1
x(3,15,6,33) = 1
x(4,16,10,8) = 1
x(4,3,14,8) = 1
x(4,2,16,8) = 1
x(4,14,2,8) = 1
x(5,7,4,76) = 1
x(5,4,2,76) = 1
x(5,2,16,76) = 1
x(6,5,11,81) = 1
x(6,11,12,81) = 1
x(6,6,5,81) = 1
x(6,7,6,81) = 1
x(7,5,6,140) = 1
x(7,6,7,140) = 1
x(8,7,6,7) = 1
x(8,4,7,7) = 1
x(9,8,16,140) = 1
x(9,9,8,140) = 1
x(9,16,1,140) = 1
x(9,10,9,140) = 1
x(9,1,14,140) = 1
x(10,15,13,70) = 1
x(10,7,15,70) = 1
x(11,16,8,118) = 1
x(11,3,2,118) = 1
x(11,2,16,118) = 1
x(12,4,2,25) = 1
x(12,2,14,25) = 1
x(13,8,9,6) = 1
x(13,9,10,6) = 1
x(13,16,8,6) = 1
x(13,10,15,6) = 1
x(13,13,17,6) = 1
x(13,15,13,6) = 1
x(14,10,15,130) = 1
x(14,6,12,130) = 1
x(14,15,6,130) = 1
x(15,16,10,29) = 1
x(15,6,7,29) = 1
x(15,7,4,29) = 1
x(15,4,3,29) = 1
x(15,3,2,29) = 1
x(15,2,16,29) = 1
x(16,16,10,62) = 1
x(16,10,15,62) = 1
x(16,3,2,62) = 1
x(16,2,16,62) = 1
x(17,3,14,140) = 1
x(17,2,16,140) = 1
x(17,14,2,140) = 1
x(18,5,11,140) = 1
x(18,11,12,140) = 1
x(18,12,17,140) = 1
x(18,17,13,140) = 1
x(18,13,15,140) = 1
x(19,7,4,15) = 1
x(19,4,3,15) = 1
x(19,3,14,15) = 1
x(20,5,11,96) = 1
x(20,11,12,96) = 1
x(20,12,17,96) = 1
x(20,17,13,96) = 1
x(21,2,16,137) = 1
x(21,14,2,137) = 1
x(22,7,15,12) = 1
x(23,7,15,6) = 1
x(24,7,15,140) = 1
x(25,10,16,79) = 1
x(25,13,15,79) = 1
x(25,15,10,79) = 1
x(26,8,9,29) = 1
x(26,9,10,29) = 1
x(26,10,15,29) = 1
x(26,15,13,29) = 1
x(27,5,11,133) = 1
x(27,11,12,133) = 1
x(27,12,17,133) = 1
x(27,10,15,133) = 1
x(27,6,5,133) = 1
x(27,15,6,133) = 1
x(28,16,10,5) = 1
x(28,3,14,5) = 1
x(28,2,3,5) = 1
x(28,14,1,5) = 1
x(28,1,16,5) = 1
x(29,5,6,49) = 1
x(29,8,9,49) = 1
x(29,9,10,49) = 1
x(29,16,8,49) = 1
x(29,10,15,49) = 1
x(29,13,17,49) = 1
x(29,6,7,49) = 1
x(29,15,13,49) = 1
x(29,7,4,49) = 1
x(29,4,3,49) = 1
x(29,3,14,49) = 1
x(29,14,1,49) = 1
x(29,1,16,49) = 1
x(30,5,6,43) = 1
x(30,11,5,43) = 1
x(30,6,7,43) = 1
x(30,7,15,43) = 1
x(31,3,4,133) = 1
x(32,5,11,76) = 1
x(32,11,12,76) = 1
x(32,12,17,76) = 1
x(32,17,13,76) = 1
x(32,6,5,76) = 1
x(33,2,4,5) = 1
x(34,6,7,62) = 1
x(35,8,16,75) = 1
x(35,9,8,75) = 1
x(35,10,9,75) = 1
x(35,15,10,75) = 1
x(36,10,15,3) = 1
x(36,15,13,3) = 1
x(37,16,8,93) = 1
x(37,2,16,93) = 1
x(38,12,17,4) = 1
x(38,6,12,4) = 1
x(39,8,9,108) = 1
x(39,9,10,108) = 1
x(39,10,15,108) = 1
x(40,2,7,75) = 1
maxSlice(1) = 140
maxSlice(2) = 140
maxSlice(3) = 140
maxSlice(4) = 140
maxSlice(5) = 140
maxSlice(6) = 140
maxSlice(7) = 140
maxSlice(8) = 140
maxSlice(9) = 140
maxSlice(10) = 140
maxSlice(11) = 140
maxSlice(12) = 140
maxSlice(13) = 140
maxSlice(14) = 140
maxSlice(15) = 140
maxSlice(16) = 140
maxSlice(17) = 140
maxSlice(18) = 140
maxSlice(19) = 140
maxSlice(20) = 140
maxSlice(21) = 140
maxSlice(22) = 140
maxSlice(23) = 140
maxSlice(24) = 140
maxSlice(25) = 140
maxSliceOverall = 140
Update RSA
Feasible

--- Slice occupation ---
#1. *****                                         ***                                                                                        ***
#2.      ***              ***                                                                                                             ******
#3. ********    ***                               ***                                                                                        ***
#4.             ***           ***                 ***                                                                                 ***       
#5. *****                     ***                           ******                                                     ***                      
#6. *****                 ***                                              *****                                                                
#7.     ***     ***           ***                 ***                      *****                                                                
#8. ***                                                                   *****                                                                 
#9. ************                            ***                        ***                                                                ******
#10. *** ***                   ***   ***     ***   ***       ******                ***                                                      *****
#11.                               ***                                                                                           *********       
#12. ******                    ***                 ***                  ***      ***                                                       ******
#13. ******                    *** ***             ***       ******       ****** ***                        *****                *********       
#14. ********                  ***                           ******              ***                                                             
#15.    ***                    *** ***             ***                    ******                            *****                             ***
#16.    ***                    *** ***             ***                    ******                            *****                             ***
#17.    ***                                        ***                    ******               ***                      ***                   ***
#18. *****                                         ***                                                                                        ***
#19. ***  ***                  ***                           ******         *****              ***                      ***                ******
#20.    ***                                        ***                        ***                 ***                                      ******
#21.  ***                            ***                                      ***                 ***                                  *** ******
#22. ***                           ***                                        ***  ***            ***                                  *** ******
#23.  ***                            ***                                                                                         ******          
#24. ***                           ***       ***                              ***  ***            ***                                  *** ******
#25. ***                           ***       ***   ***                        ***  ***                                                 ***  *****

For demand 1 : 
(12--17, 35)
(6--12, 35)
(7--6, 35)

For demand 2 : 
(5--6, 3)
(11--5, 3)
(12--11, 3)
(6--7, 3)
(7--2, 3)
(2--16, 3)

For demand 3 : 
(5--11, 33)
(11--12, 33)
(8--9, 33)
(9--10, 33)
(10--15, 33)
(6--5, 33)
(15--6, 33)

For demand 4 : 
(16--10, 8)
(3--14, 8)
(2--16, 8)
(14--2, 8)

For demand 5 : 
(7--4, 76)
(4--2, 76)
(2--16, 76)

For demand 6 : 
(5--11, 81)
(11--12, 81)
(6--5, 81)
(7--6, 81)

For demand 7 : 
(5--6, 140)
(6--7, 140)

For demand 8 : 
(7--6, 7)
(4--7, 7)

For demand 9 : 
(8--16, 140)
(9--8, 140)
(16--1, 140)
(10--9, 140)
(1--14, 140)

For demand 10 : 
(15--13, 70)
(7--15, 70)

For demand 11 : 
(16--8, 118)
(3--2, 118)
(2--16, 118)

For demand 12 : 
(4--2, 25)
(2--14, 25)

For demand 13 : 
(8--9, 6)
(9--10, 6)
(16--8, 6)
(10--15, 6)
(13--17, 6)
(15--13, 6)

For demand 14 : 
(10--15, 130)
(6--12, 130)
(15--6, 130)

For demand 15 : 
(16--10, 29)
(6--7, 29)
(7--4, 29)
(4--3, 29)
(3--2, 29)
(2--16, 29)

For demand 16 : 
(16--10, 62)
(10--15, 62)
(3--2, 62)
(2--16, 62)

For demand 17 : 
(3--14, 140)
(2--16, 140)
(14--2, 140)

For demand 18 : 
(5--11, 140)
(11--12, 140)
(12--17, 140)
(17--13, 140)
(13--15, 140)

For demand 19 : 
(7--4, 15)
(4--3, 15)
(3--14, 15)

For demand 20 : 
(5--11, 96)
(11--12, 96)
(12--17, 96)
(17--13, 96)

For demand 21 : 
(2--16, 137)
(14--2, 137)

For demand 22 : 
(7--15, 12)

For demand 23 : 
(7--15, 6)

For demand 24 : 
(7--15, 140)

For demand 25 : 
(10--16, 79)
(13--15, 79)
(15--10, 79)

For demand 26 : 
(8--9, 29)
(9--10, 29)
(10--15, 29)
(15--13, 29)

For demand 27 : 
(5--11, 133)
(11--12, 133)
(12--17, 133)
(10--15, 133)
(6--5, 133)
(15--6, 133)

For demand 28 : 
(16--10, 5)
(3--14, 5)
(2--3, 5)
(14--1, 5)
(1--16, 5)

For demand 29 : 
(5--6, 49)
(8--9, 49)
(9--10, 49)
(16--8, 49)
(10--15, 49)
(13--17, 49)
(6--7, 49)
(15--13, 49)
(7--4, 49)
(4--3, 49)
(3--14, 49)
(14--1, 49)
(1--16, 49)

For demand 30 : 
(5--6, 43)
(11--5, 43)
(6--7, 43)
(7--15, 43)

For demand 31 : 
(3--4, 133)

For demand 32 : 
(5--11, 76)
(11--12, 76)
(12--17, 76)
(17--13, 76)
(6--5, 76)

For demand 33 : 
(2--4, 5)

For demand 34 : 
(6--7, 62)

For demand 35 : 
(8--16, 75)
(9--8, 75)
(10--9, 75)
(15--10, 75)

For demand 36 : 
(10--15, 3)
(15--13, 3)

For demand 37 : 
(16--8, 93)
(2--16, 93)

For demand 38 : 
(12--17, 4)
(6--12, 4)

For demand 39 : 
(8--9, 108)
(9--10, 108)
(10--15, 108)

For demand 40 : 
(2--7, 75)

Output 40Demand_1
Output EdgeSliceHols: 40Demand_1
Time taken by iteration is : 7268.425818 sec
Output 40Demand_FINAL
Output EdgeSliceHols: 40Demand_FINAL

--- The Demands ---
#1. 7 -- 17. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#2. 12 -- 16. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#3. 8 -- 12. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#4. 3 -- 10. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#5. 7 -- 16. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#6. 7 -- 12. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#7. 5 -- 7. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#8. 4 -- 6. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#9. 10 -- 14. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#10. 7 -- 13. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#11. 3 -- 8. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#12. 4 -- 14. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#13. 16 -- 17. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#14. 10 -- 12. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#15. 6 -- 10. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#16. 3 -- 15. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#17. 3 -- 16. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#18. 5 -- 15. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#19. 7 -- 14. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#20. 5 -- 13. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#21. 14 -- 16. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#22. 7 -- 15. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#23. 7 -- 15. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#24. 7 -- 15. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#25. 13 -- 16. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#26. 8 -- 13. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#27. 10 -- 17. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#28. 2 -- 10. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#29. 5 -- 17. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#30. 11 -- 15. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#31. 3 -- 4. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#32. 6 -- 13. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#33. 2 -- 4. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#34. 6 -- 7. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#35. 15 -- 16. nbSlices: 6, maxLength: 600.000000000, ROUTED: YES
#36. 10 -- 13. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#37. 2 -- 8. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#38. 6 -- 17. nbSlices: 3, maxLength: 3000.000000000, ROUTED: YES
#39. 8 -- 15. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES
#40. 2 -- 7. nbSlices: 5, maxLength: 1500.000000000, ROUTED: YES

Time taken by optimization is : 7268.447552100 sec
Total time taken by program is : 7268.464340500 sec
